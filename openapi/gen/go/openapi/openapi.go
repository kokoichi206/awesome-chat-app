// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ログイン処理。
	// (POST /api/login)
	PostLogin(c *gin.Context)
	// 自分が参加しているルーム一覧。
	// (GET /api/rooms)
	GetRooms(c *gin.Context)
	// ルーム情報を更新する。
	// (PATCH /api/rooms)
	PatchRoom(c *gin.Context)
	// ルームを新規作成する。
	// (POST /api/rooms)
	PostRoom(c *gin.Context)
	// 指定したルームでの未読メッセージ一覧を取得する。
	// (GET /api/rooms/:roomID/messages)
	GetMessages(c *gin.Context, params GetMessagesParams)
	// 指定したルームに新着メッセージを投稿する。
	// (POST /api/rooms/:roomID/messages)
	PostMessage(c *gin.Context)
	// 指定したルームに所属するユーザー一覧。
	// (GET /api/rooms/:roomID/users)
	GetRoomUsers(c *gin.Context)
	// 友達追加されてるが、自分からは追加していないユーザー一覧。
	// (GET /api/users/followers)
	GetFollowers(c *gin.Context)
	// 自分が友達追加しているユーザー一覧。
	// (GET /api/users/following)
	GetFollowing(c *gin.Context)
	// 友達の情報を更新する。
	// (PATCH /api/users/following/{user_id})
	PatchFollowing(c *gin.Context, userId UserIdPath)
	// 他人のユーザーアカウントを友達に追加する。
	// (POST /api/users/following/{user_id})
	PostFollowing(c *gin.Context, userId UserIdPath)
	// ログインしている（セッションを発行した）ユーザーの情報を取得する。
	// (GET /api/users/me)
	GetMe(c *gin.Context)
	// ログインしている（セッションを発行した）ユーザーの情報を変更する。
	// (PATCH /api/users/me)
	PostMe(c *gin.Context)
	// 他人を友達追加するための検索（ユーザー ID を使用）。
	// (GET /api/users/{user_id})
	GetUserByID(c *gin.Context, userId UserIdPath)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetRooms operation middleware
func (siw *ServerInterfaceWrapper) GetRooms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRooms(c)
}

// PatchRoom operation middleware
func (siw *ServerInterfaceWrapper) PatchRoom(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchRoom(c)
}

// PostRoom operation middleware
func (siw *ServerInterfaceWrapper) PostRoom(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRoom(c)
}

// GetMessages operation middleware
func (siw *ServerInterfaceWrapper) GetMessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessagesParams

	// ------------- Optional query parameter "last_read_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_read_at", c.Request.URL.Query(), &params.LastReadAt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_read_at: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessages(c, params)
}

// PostMessage operation middleware
func (siw *ServerInterfaceWrapper) PostMessage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMessage(c)
}

// GetRoomUsers operation middleware
func (siw *ServerInterfaceWrapper) GetRoomUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoomUsers(c)
}

// GetFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetFollowers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFollowers(c)
}

// GetFollowing operation middleware
func (siw *ServerInterfaceWrapper) GetFollowing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFollowing(c)
}

// PatchFollowing operation middleware
func (siw *ServerInterfaceWrapper) PatchFollowing(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserIdPath

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchFollowing(c, userId)
}

// PostFollowing operation middleware
func (siw *ServerInterfaceWrapper) PostFollowing(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserIdPath

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFollowing(c, userId)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// PostMe operation middleware
func (siw *ServerInterfaceWrapper) PostMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMe(c)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserIdPath

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByID(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/api/rooms", wrapper.GetRooms)
	router.PATCH(options.BaseURL+"/api/rooms", wrapper.PatchRoom)
	router.POST(options.BaseURL+"/api/rooms", wrapper.PostRoom)
	router.GET(options.BaseURL+"/api/rooms/:roomID/messages", wrapper.GetMessages)
	router.POST(options.BaseURL+"/api/rooms/:roomID/messages", wrapper.PostMessage)
	router.GET(options.BaseURL+"/api/rooms/:roomID/users", wrapper.GetRoomUsers)
	router.GET(options.BaseURL+"/api/users/followers", wrapper.GetFollowers)
	router.GET(options.BaseURL+"/api/users/following", wrapper.GetFollowing)
	router.PATCH(options.BaseURL+"/api/users/following/:user_id", wrapper.PatchFollowing)
	router.POST(options.BaseURL+"/api/users/following/:user_id", wrapper.PostFollowing)
	router.GET(options.BaseURL+"/api/users/me", wrapper.GetMe)
	router.PATCH(options.BaseURL+"/api/users/me", wrapper.PostMe)
	router.GET(options.BaseURL+"/api/users/:user_id", wrapper.GetUserByID)
}
